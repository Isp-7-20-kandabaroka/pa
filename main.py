import os
import re
import uuid

import asyncio
import logging
import sqlite3
import hashlib
import datetime

import aiosqlite

from datetime import datetime
from datetime import timedelta

from aiohttp import ClientSession

from collections import defaultdict

from aiogram.types import CallbackQuery
from aiogram.dispatcher import FSMContext

from forbidden_words import forbidden_words_list

from aiogram import Bot, Dispatcher, types, executor

from aiogram.utils.exceptions import MessageNotModified

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageCantBeDeleted, BadRequest





from aiogram.types import Message

subscription_start = datetime.now()
# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connection = sqlite3.connect('my_database.db')
cursor = connection.cursor()


# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
cities_list = [
    "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
    "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–°–∞–º–∞—Ä–∞", "–£—Ñ–∞", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–û–º—Å–∫", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
    "–í–æ—Ä–æ–Ω–µ–∂", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–ü–µ—Ä–º—å", "–¢–æ–º—Å–∫", "–ö–µ–º–µ—Ä–æ–≤–æ", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–•–∞–±–∞—Ä–æ–≤—Å–∫", "–ò—Ä–∫—É—Ç—Å–∫"
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_activity = {}


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
connection.commit()
connection.close()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

storage = MemoryStorage()
bot = Bot(token='6669399410:AAHWkE80Jqix61KmaXW-TQzqYw6bMZaFuhE')
dp = Dispatcher(bot, storage=storage)

CHANNEL_ID = -1002025346514
ADMIN_IDS = [487242878]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
class UserState(StatesGroup):
    AddCity = State()
    CitySelected = State()
    Subscribed = State()
    AdDescription = State()
    WaitForContact = State()
    AskForPhoto = State()
    WaitForPhotos = State()
    AdPhotos = State()
    Complaint = State()
    DeleteAd = State()
    SupportSession = State()
    AwaitReply = State()
    DeleteCity = State()


async def register_user_if_not_exists(user_id: int, username: str = None):
    async with aiosqlite.connect('my_database.db') as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with db.execute("SELECT id FROM users WHERE id = ?", (user_id,)) as cursor:
            user_exists = await cursor.fetchone()
            if not user_exists:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-—Å—Å—ã–ª–∫—É
                await db.execute("INSERT INTO users (id, username, is_blocked, plus) VALUES (?, ?, 0, 1)",
                                 (user_id, username))
                await db.commit()

                # –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
                message_text = f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{user_id}] –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É!"
                await bot.send_message(CHANNEL_ID, message_text, parse_mode=types.ParseMode.HTML)
async def check_and_block_user_if_needed(user_id: int):
    async with aiosqlite.connect('my_database.db') as db:
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫ –∂–∞–ª–æ–±
        await db.execute("UPDATE users SET complaints_count = complaints_count + 1 WHERE id = ?", (user_id,))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –ø–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        async with db.execute("SELECT complaints_count FROM users WHERE id = ?", (user_id,)) as cursor:
            complaints_count = await cursor.fetchone()
            if complaints_count and complaints_count[0] >= 3:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await db.execute("UPDATE users SET is_blocked = 1 WHERE id = ?", (user_id,))
                await db.commit()
                return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        await db.commit()  # –í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å –æ –∫–æ–º–º–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –º–µ–Ω—å—à–µ 3

async def update_last_activity(user_id: int):
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    async with aiosqlite.connect('my_database.db') as db:
        await db.execute("UPDATE users SET last_activity = ? WHERE id = ?", (now, user_id))
        await db.commit()
async def check_inactivity():
    while True:
        try:
            now = datetime.now()
            time_threshold = now - timedelta(seconds=3600)

            async with aiosqlite.connect('my_database.db') as db:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                async with db.execute("SELECT id FROM users WHERE last_activity < ?", (time_threshold,)) as cursor:
                    inactive_users = await cursor.fetchall()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for user_id, in inactive_users:
                    await send_notification(user_id)

            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(21600)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

def restart_button():
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    markup = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="clear_chat1")
    markup.add(button)
    return markup



async def send_notification(user_id: int):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.send_message(user_id,
                               "–í—ã –±—ã–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 —á–∞—Å–æ–≤.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏–∂–µ\n—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
                               reply_markup=restart_button())
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
@dp.message_handler(commands=['stat'])
async def send_statistics(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id not in ADMIN_IDS:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    async with aiosqlite.connect('my_database.db') as db:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–º –≥–æ—Ä–æ–¥–µ
        async with db.execute("SELECT city_id, COUNT(*) as count FROM advertisements GROUP BY city_id") as cursor:
            rows = await cursor.fetchall()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if rows:
            message_text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º:\n" + "\n".join([f"{row[0]}: {row[1]}" for row in rows])
            await message.reply(message_text)
        else:
            await message.reply("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

@dp.message_handler(commands=['start'], state="*")
async def send_welcome(message: types.Message):

    user_id = message.from_user.id
    await update_last_activity(user_id)
    username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await register_user_if_not_exists(user_id,username)
    if await is_user_blocked(user_id):
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    keyboard = InlineKeyboardMarkup(row_width=2)
    button_subscribe = InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/SOVMESTNAYA_ARENDA_RU")
    button_continue = InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue')

    keyboard.add(button_subscribe, button_continue)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    with open('main.jpg', 'rb') as photo:
        await message.answer_photo(photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–π—Å—Ç–≤–∏–µ.",reply_markup=keyboard)
async def is_user_blocked(user_id: int) -> bool:
    async with aiosqlite.connect('my_database.db') as db:
        async with db.execute("SELECT is_blocked FROM users WHERE id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result and result[0] == 1:
                return True
    return False
@dp.callback_query_handler(lambda c: c.data == 'continue', state="*")
async def main(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    await update_last_activity(callback_query.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    await callback_query.message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", reply_markup=generate_main_menu_markup())
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–ª–∞–π –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

@dp.message_handler(commands=['delete'], state="*")
async def start_delete_ad(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    await UserState.DeleteAd.set()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
@dp.message_handler(state=UserState.DeleteAd)
async def delete_ad(message: types.Message, state: FSMContext):
    ad_id = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if not ad_id.isdigit():
        await message.reply("ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    async with aiosqlite.connect('my_database.db') as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with db.execute("SELECT id FROM advertisements WHERE id = ?", (ad_id,)) as cursor:
            ad = await cursor.fetchone()
            if ad is None:
                await message.reply(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {ad_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                # –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                await db.execute("DELETE FROM advertisements WHERE id = ?", (ad_id,))
                await db.commit()
                await message.reply(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {ad_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")

    await state.finish()  # –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è


@dp.message_handler(commands=['menu'], state="*")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await update_last_activity(message.from_user.id)
    user_id = message.from_user.id
    if await is_user_blocked(user_id):
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    last_menu_message_id = data.get('last_menu_message_id')

    if last_menu_message_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=last_menu_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é
    sent_message = await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=generate_main_menu_markup())

    # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é
    await state.update_data(last_menu_message_id=sent_message.message_id)

def generate_main_menu_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥", callback_data="select_city"))
    #markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞", callback_data="oplata"))
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    return markup

async def generate_city_selection_markup():
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cities = await fetch_cities()  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT name FROM cities ORDER BY name ASC")
    cities = cursor.fetchall()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    connection.close()

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    for city in cities:
        city_name = city[0]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        button = types.InlineKeyboardButton(city_name, callback_data=f"city_{city_name}")
        buttons.append(button)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞–∑–º–µ—Ç–∫—É
    markup.add(*buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"
    markup.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="add_city"))

    return markup


@dp.callback_query_handler(lambda c: c.data == 'add_city')
async def add_city_callback(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
    cancel_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_adding_city')
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    await UserState.AddCity.set()
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=cancel_markup
    )


@dp.callback_query_handler(lambda c: c.data == 'cancel_adding_city', state=UserState.AddCity)
async def cancel_adding_city(callback_query: types.CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.reset_state()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    await bot.send_message(callback_query.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

def generate_delete_keyboard():
    markup = types.InlineKeyboardMarkup()
    delete_button = types.InlineKeyboardButton("—Å–∫—Ä—ã—Ç—å", callback_data="delete_message")
    markup.add(delete_button)
    return markup
def generate_back_to_main_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return markup
def generate_skip_button():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photos"))
    return markup
def generate_oplata_button():
    markup = types.InlineKeyboardMarkup()
    delete_button = types.InlineKeyboardButton("—Å–∫—Ä—ã—Ç—å", callback_data="delete_message")
    markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy"))
    return markup
def generate_done_button():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="done_z"))
    return markup
def city_again():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="sityagain"))
    return markup
def generate_reply_keyboard():
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard
def generate_clear_chat_button1():
    markup = InlineKeyboardMarkup()
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_complaint")
    markup.add(cancel_button)
    return markup
def generate_cancel_button():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_support"))
    return markup

def generate_cancel_support_button():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="cancel_support"))
    return markup

def generate_action_keyboard_with_back():
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_ad"),
               types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data="view_ads"))
    markup.row(types.InlineKeyboardButton("–ú–æ—ë –æ–±—å—è–≤–ª–µ–Ω–∏–µ", callback_data="my_ad"),
               types.InlineKeyboardButton("–ñ–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="complaint_start"))
    markup.row(types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="pod"),
               #types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞", callback_data="oplata"))
                types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="back_to_city_selection"))
    return markup

@dp.callback_query_handler(lambda c: c.data == "cancel_complaint", state=UserState.Complaint)
async def cancel_complaint(callback_query: types.CallbackQuery, state: FSMContext):
    # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∂–∞–ª–æ–±—ã
    await state.reset_state(with_data=False)  # –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –æ—Å—Ç–∞—é—Ç—Å—è
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id, "–ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await bot.send_message(callback_query.from_user.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.")

@dp.callback_query_handler(lambda c: c.data == "pod", state="*")
async def start_support_session(callback_query: types.CallbackQuery, state: FSMContext):
    await update_last_activity(callback_query.from_user.id)
    user_id = callback_query.from_user.id
    await update_last_activity(user_id)
    # –í—ã–∑—ã–≤–∞–µ–º track_user_action –¥–æ –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∞–º–æ–º
    need_to_clear_chat = await track_user_action(user_id)
    if need_to_clear_chat:
        await state.finish()
        await clear_chat(user_id, callback_query.message.message_id)
    else:
        await UserState.SupportSession.set()
        await state.update_data(user_id=callback_query.from_user.id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await bot.send_message(
        callback_query.from_user.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!\n\n–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ,\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∏—Ç—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –¥—Ä—É–≥–∏–º –∫–æ–º–∞–Ω–¥–∞–º",
        reply_markup=generate_cancel_button()
    )


@dp.callback_query_handler(lambda c: c.data == "cancel_support", state=UserState.SupportSession)
async def cancel_support_session(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await track_user_action(user_id)  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.reset_state(with_data=False)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.edit_message_text(
        text="–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.",
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )


@dp.message_handler(state=UserState.SupportSession)
async def handle_user_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    support_staff_id = 487242878  # ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

    data = await state.get_data()
    last_message_id = data.get('last_cancel_button_message_id')

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if last_message_id:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    forward_message = f"–í–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n\n{message.text}"
    markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}_{username}"))
    await bot.send_message(support_staff_id, forward_message, reply_markup=markup)





@dp.callback_query_handler(lambda c: c.data.startswith('reply_'), state="*")
async def initiate_reply(callback_query: types.CallbackQuery, state: FSMContext):
    _, user_id, username = callback_query.data.split('_')
    await state.update_data(reply_to_user_id=user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    await UserState.AwaitReply.set()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É, –≤–∫–ª—é—á–∞—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prompt = f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è @{username}:"
    await bot.send_message(callback_query.from_user.id, prompt)


@dp.message_handler(state=UserState.AwaitReply)
async def send_reply_to_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    reply_to_user_id = data['reply_to_user_id']  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(reply_to_user_id, message.text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    sent_message = await bot.send_message(reply_to_user_id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω.\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=generate_cancel_support_button())

    # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(last_cancel_button_message_id=sent_message.message_id)

    # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    await message.reply("–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await state.reset_state()


@dp.callback_query_handler(lambda c: c.data == "complaint_start", state="*")
async def start_complaint(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await update_last_activity(callback_query.from_user.id)
    await track_user_action(user_id)  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await UserState.Complaint.set()
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @–∏–º—è.\n"
        "\n\n–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ,\n–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∏—Ç—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –¥—Ä—É–≥–∏–º –∫–æ–º–∞–Ω–¥–∞–º",reply_markup=generate_clear_chat_button1())
@dp.message_handler(state=UserState.Complaint)
async def handle_complaint(message: types.Message, state: FSMContext):
    channel_id = -1002025346514  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∂–∞–ª–æ–±
    complaint_text = message.text

    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å username –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∂–∞–ª–æ–±—ã
    username_match = re.search(r'@(\w+)', complaint_text)
    if username_match:
        username = username_match.group(1)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        async with aiosqlite.connect('my_database.db') as db:
            async with db.execute("SELECT id FROM users WHERE username = ?", (username,)) as cursor:
                user = await cursor.fetchone()
                if user:
                    user_id = user[0]
                    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∂–∞–ª–æ–±—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    user_blocked = await check_and_block_user_if_needed(user_id)
                    if user_blocked:
                        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ 3 –∂–∞–ª–æ–±.")
                    else:
                        await message.reply(f"–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
                else:
                    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª –ª–∏ –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_mention = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
    channel_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} ({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{complaint_text}"
    await bot.send_message(channel_id, channel_message)
    await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", reply_markup=generate_clear_chat_button())
    await state.finish()

def generate_clear_chat_button():
    markup = InlineKeyboardMarkup()
    clear_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="clear_chat")
    markup.add(clear_button)
    return markup


async def city_exists(city_name: str) -> bool:
    async with aiosqlite.connect('my_database.db') as db:
        async with db.execute("SELECT EXISTS(SELECT 1 FROM cities WHERE name = ? LIMIT 1)", (city_name,)) as cursor:
            return (await cursor.fetchone())[0] == 1

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_city"))
async def confirm_city(callback_query: types.CallbackQuery):
    print(f"Callback data received: {callback_query.data}")  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        _, city_name, user_id_str = callback_query.data.split(":", 2)
    except ValueError as e:
        print(f"Error splitting callback data: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫

    user_id = int(user_id_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ

    if await city_exists(city_name):
        await bot.answer_callback_query(callback_query.id, f"–ì–æ—Ä–æ–¥ {city_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        async with aiosqlite.connect('my_database.db') as db:
            await db.execute("INSERT INTO cities (name, proposed_by_user_id) VALUES (?, ?)", (city_name, user_id))
            await db.commit()
        await bot.answer_callback_query(callback_query.id, f"–ì–æ—Ä–æ–¥ {city_name} –¥–æ–±–∞–≤–ª–µ–Ω.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–º—É –≥–æ—Ä–æ–¥
        await bot.send_message(user_id, f"–í–∞—à –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ {city_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        channel_id = -1002025346514  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        await bot.send_message(channel_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {city_name}.")


@dp.callback_query_handler(lambda c: c.data == "cancel_city")
async def cancel_city(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–º—É –≥–æ—Ä–æ–¥


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'delete_message')
async def process_callback_delete_message(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await track_user_action(user_id)  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

@dp.message_handler(state=UserState.AddCity)
async def add_city(message: types.Message, state: FSMContext):
    city_name = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º

    async with aiosqlite.connect('my_database.db') as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with db.execute("SELECT COUNT(*) FROM cities WHERE name = ?", (city_name,)) as cursor:
            count = await cursor.fetchone()
            if count[0] > 0:
                # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await message.reply("–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    channel_id = -1002025346514  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_city:{city_name}:{message.from_user.id}")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"cancel_city_{message.from_user.id}")]
    ])
    try:
        await bot.send_message(channel_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥: {city_name}", reply_markup=markup)
        await message.reply("–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
    finally:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏


@dp.message_handler(commands=['delete_city'], state='*')
async def start_delete_city(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await UserState.DeleteCity.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")


@dp.message_handler(state=UserState.DeleteCity)
async def delete_city(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    city_name = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º

    async with aiosqlite.connect('my_database.db') as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with db.execute("SELECT id FROM cities WHERE name = ?", (city_name,)) as cursor:
            city = await cursor.fetchone()
            if city is None:
                # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
                await message.reply("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                # –£–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await db.execute("DELETE FROM cities WHERE name = ?", (city_name,))
                await db.commit()
                await message.reply(f"–ì–æ—Ä–æ–¥ {city_name} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏


async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=generate_main_menu_markup())

@dp.callback_query_handler(text="select_city")
async def select_city(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    await update_last_activity(callback_query.from_user.id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è InlineKeyboardMarkup
    markup = await generate_city_selection_markup()
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('city_'), state='*')
async def process_city_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await update_last_activity(callback_query.from_user.id)
    city = callback_query.data.split('_')[1]
    await state.update_data(city=city, user_id=callback_query.from_user.id)
    logger.info(f"–ì–æ—Ä–æ–¥ {city} –≤—ã–±—Ä–∞–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(city=city)
    logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    markup = generate_action_keyboard_with_back()
    await callback_query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city}.", reply_markup=markup)
    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

@dp.callback_query_handler(lambda c: c.data == 'sityagain', state='*')
async def select_city_again(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
    try:
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π: {e}")

    if 'last_menu_message_id' in data:
        try:
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=data['last_menu_message_id'])
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {data['last_menu_message_id']} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é: {e}")

    # –û—á–∏—â–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–æ–≥–∏–∫—É —Ñ—É–Ω–∫—Ü–∏–∏
    await state.update_data(last_menu_message_id=None)

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –º–µ–Ω—é
    await state.set_data({'ads': [], 'current_ad_index': 0, 'messages_to_delete': []})
    logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.")

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    for msg_id in data.get('messages_to_delete', []):
        try:
            await bot.delete_message(callback_query.message.chat.id, msg_id)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID {msg_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")





@dp.callback_query_handler(lambda c: c.data == 'back_to_city_selection', state='*')
async def back_to_city_selection(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è InlineKeyboardMarkup
    markup = await generate_city_selection_markup()
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=markup)


@dp.callback_query_handler(text="my_ad", state="*")
async def my_ad(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await update_last_activity(callback_query.from_user.id)
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, description, contact, photos, city_id FROM advertisements WHERE user_id=?", (user_id,))
    ad = cursor.fetchone()
    connection.close()

    if not ad:
        await bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    ad_id, description, contact, photos,city = ad
    message_text = f"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\nID: {ad_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n–í –ì–æ—Ä–æ–¥–µ: {city}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
    if photos:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ `photos` —Ö—Ä–∞–Ω–∏—Ç –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        photos_list = photos.split(',')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        with open(photos_list[0].strip(), 'rb') as photo:
            await bot.send_photo(user_id, photo, caption=message_text, reply_markup=generate_delete_keyboard())
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        for photo_path in photos_list[1:]:
            with open(photo_path.strip(), 'rb') as photo:
                await bot.send_photo(user_id, photo)
    else:
        await bot.send_message(user_id, message_text, reply_markup=generate_delete_keyboard())



async def delete_previous_messages(state: FSMContext, chat_id: int):
    async with state.proxy() as data:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        last_bot_message_id = data.pop('last_bot_message_id', None)
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id, last_bot_message_id)
            except Exception as e:
                logging.error(f"Error deleting bot's message: {e}")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_user_message_id = data.pop('last_user_message_id', None)
        if last_user_message_id:
            try:
                await bot.delete_message(chat_id, last_user_message_id)
            except Exception as e:
                logging.error(f"Error deleting user's message: {e}")


@dp.callback_query_handler(lambda c: c.data == 'create_ad', state="*")
async def create_ad(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id
    await update_last_activity(callback_query.from_user.id)
    # –í—ã–∑—ã–≤–∞–µ–º track_user_action –¥–æ –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∞–º–æ–º
    need_to_clear_chat = await track_user_action(user_id)
    if need_to_clear_chat:
        await state.finish()
        await clear_chat(user_id, callback_query.message.message_id)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    async with aiosqlite.connect('my_database.db') as db:
        async with db.execute("SELECT plus FROM users WHERE id = ?", (user_id,)) as cursor:
            subscription_status = await cursor.fetchone()

    if subscription_status is None or subscription_status[0] == 0 and user_id not in ADMIN_IDS:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id,
                               "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await delete_previous_messages(state, chat_id)

    if user_id not in ADMIN_IDS:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        async with aiosqlite.connect('my_database.db') as db:
            async with db.execute("SELECT COUNT(*) FROM advertisements WHERE user_id = ?", (user_id,)) as cursor:
                count = await cursor.fetchone()

        if count and count[0] > 0:
            # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(chat_id,
                                   "–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
            return

    # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ—Ç, –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏:")
    await UserState.AdDescription.set()



def compile_forbidden_words_regex(words_list):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å–ª–æ–≤–∞—Ö –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–¥–Ω–æ –±–æ–ª—å—à–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    escaped_words = [re.escape(word) for word in words_list]
    pattern = '|'.join(escaped_words)
    return re.compile(pattern, re.IGNORECASE)


def filter_description(description):
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    phone_pattern = r'\+7\s?9[0-9]{9}|89[0-9]{9}'
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'  # –®–∞–±–ª–æ–Ω –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    link_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'  # –®–∞–±–ª–æ–Ω –¥–ª—è —Å—Å—ã–ª–æ–∫
    mention_pattern = r'@\w+'  # –®–∞–±–ª–æ–Ω –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –®–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–∏—Å–µ–ª, –∫—Ä–æ–º–µ –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã—Ö

    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    forbidden_words_regex = compile_forbidden_words_regex(forbidden_words_list)

    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    patterns = [forbidden_words_regex, phone_pattern, email_pattern, link_pattern, mention_pattern,
                ]
    for pattern in patterns:
        description = re.sub(pattern, "", description)

    return description.strip()  # –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message_handler(state=UserState.AdDescription)
async def process_ad_description(message: types.Message, state: FSMContext):
    filtered_description = filter_description(message.text)  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—Å—Ç

    async with state.proxy() as data:
        data['description'] = filtered_description

    await UserState.WaitForContact.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")

@dp.message_handler(state=UserState.WaitForContact)
async def process_contact_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact'] = message.text

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    await UserState.AskForPhoto.set()
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo"))
    markup.add(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo"))
    await message.answer("–•–æ—Ç–∏—Ç–µ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == 'add_photo', state=UserState.AskForPhoto)
async def add_photo_handler(callback_query: types.CallbackQuery):
    await UserState.WaitForPhotos.set()
    await bot.answer_callback_query(callback_query.id)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo"))

    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message_handler(content_types=types.ContentType.PHOTO, state=UserState.WaitForPhotos)
async def process_photos(message: types.Message, state: FSMContext):
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    photo_id = photo.file_id

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_path = os.path.join('img', f'{photo_id}.jpg')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ –¥–∏—Å–∫
    await photo.download(destination=photo_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    async with state.proxy() as data:
        data['photo'] = photo_path

    await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å.",reply_markup=generate_done_button())

async def fetch_cities():
    async with aiosqlite.connect('my_database.db') as db:
        cursor = await db.execute("SELECT name FROM cities ORDER BY name ASC")
        cities = await cursor.fetchall()
        return [city[0] for city in cities]

@dp.callback_query_handler(lambda c: c.data == 'skip_photo', state=UserState.AskForPhoto)
async def skip_photo_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await done_add(callback_query, state)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è


async def delete_ad_after_duration(ad_id, duration_in_seconds=60):
    await asyncio.sleep(duration_in_seconds)
    connection = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—Ä–∞–Ω–µ–µ
    try:
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("DELETE FROM advertisements WHERE id=?", (ad_id,))
        connection.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID {ad_id}: {e}")
    finally:
        if connection:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
            connection.close()
    print(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {ad_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

@dp.callback_query_handler(lambda c: c.data == 'skip_photo', state=UserState.WaitForPhotos)
async def skip_photo_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏
    await done_add(callback_query, state)

@dp.callback_query_handler(lambda c: c.data == 'done_z', state=UserState.WaitForPhotos)
async def done_add(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with state.proxy() as data:
        city = data['city']
        user_id = data.get('user_id')
        description = data['description']
        contact = data['contact']
        photos = data.get('photo', [])

    async with aiosqlite.connect('my_database.db') as db:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ
        async with db.execute("SELECT COUNT(*) FROM advertisements") as cursor:
            ads_count = (await cursor.fetchone())[0]

        expiration_duration = timedelta(days=14)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫
        if ads_count < 500:  # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –º–µ–Ω—å—à–µ 500, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –≤ 2 –º–µ—Å—è—Ü–∞
            expiration_duration = timedelta(days=60)

        expiration_date = datetime.now() + expiration_duration
        try:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞
            cursor = await db.execute('''
                    INSERT INTO advertisements (user_id, city_id, description, contact, photos, published_at, expiration_date) 
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (user_id, city, description, contact, ','.join(photos) if isinstance(photos, list) else photos,
                      datetime.now(), expiration_date))
            await db.commit()

            ad_id = cursor.lastrowid  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

            message_text = f"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {ad_id}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n–í –≥–æ—Ä–æ–¥–µ: {city}"

            if photos:
                # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ —Ñ–æ—Ç–æ
                photo_path = photos[0] if isinstance(photos, list) else photos
                with open(photo_path, 'rb') as photo:
                    await bot.send_photo(callback_query.from_user.id, photo=photo, caption=message_text)
            else:
                await bot.send_message(callback_query.from_user.id, message_text)

            await bot.send_message(callback_query.from_user.id,
                                   f"–°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è 14 –¥–Ω–µ–π, —É–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö!\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –¥—Ä—É–≥–∏–º –∫–æ–º–∞–Ω–¥–∞–º",
                                   reply_markup=generate_clear_chat_button())

        except sqlite3.DatabaseError as e:
            await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        finally:
            await db.close()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: True,
                           state=[UserState.AdDescription, UserState.WaitForContact, UserState.AskForPhoto,
                                  UserState.WaitForPhotos])
async def global_exit_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –°–ø–∏—Å–æ–∫ callback_data –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    allowed_callback_data = ['create_ad', 'add_photo', 'skip_photo', 'done_z']

    if callback_query.data not in allowed_callback_data:
        # –ï—Å–ª–∏ callback_data –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback_query.message.answer("–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª–∏ –Ω–∞–∂–∞—Ç—å, –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.")

@dp.callback_query_handler(lambda c: c.data == 'view_ads', state='*')
async def view_ads(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await update_last_activity(callback_query.from_user.id)
    state_data = await state.get_data()
    city = state_data.get('city')
    async with aiosqlite.connect('my_database.db') as db:
        cursor = await db.execute("SELECT id, description, contact, photos FROM advertisements WHERE city_id=? ORDER BY RANDOM()", (city,))
        ads = await cursor.fetchall()

    if not ads:
        # –ï—Å–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await bot.send_message(
            callback_query.from_user.id,
            "–í –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º!!!\n\n–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ,\n–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –¥—Ä—É–≥–∏–º –∫–æ–º–∞–Ω–¥–∞–º",
            reply_markup=generate_clear_chat_button()  # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤—ã–±–æ—Ä—É
        )
        return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å send_ads_batch

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    await state.set_data({'ads': ads, 'current_ad_index': 0})
    await send_ads_batch(callback_query.from_user.id, state)

async def show_ad(user_id, ad, state: FSMContext):
    ad_id, description, contact, photos = ad
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect('my_database.db') as db:
        async with db.execute("SELECT plus FROM users WHERE id = ?", (user_id,)) as cursor:
            subscription_status = await cursor.fetchone()

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç, –∏–Ω–∞—á–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    contact_info = contact if subscription_status and subscription_status[0] == 1 else "–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ\n–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É."

    message_text = f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ ID: {ad_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}"
    message = None

    if photos:
        photo_ids = photos.split(', ')
        photo_path = photo_ids[0].strip()
        if os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo_file:
                message = await bot.send_photo(user_id, photo_file, caption=message_text)
        else:
            message = await bot.send_message(user_id, "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        message = await bot.send_message(user_id, message_text)
async def send_ads_batch(user_id, state: FSMContext):
    await update_last_activity(user_id)
    user_data = await state.get_data()
    ads = user_data['ads']
    current_ad_index = user_data['current_ad_index']
    ads_to_send = ads[current_ad_index:current_ad_index+20]

    for ad in ads_to_send:
        await show_ad(user_id, ad, state)
        await asyncio.sleep(0.3)  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–ª—É–¥–∞

    new_index = current_ad_index + 20
    await state.update_data(current_ad_index=new_index)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –µ—Å—Ç—å –µ—â–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
    if new_index < len(ads):
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="next_ad"))
        await bot.send_message(user_id, "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?", reply_markup=markup)
        await bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=generate_clear_chat_button())
    else:
        await bot.send_message(user_id, "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.\n\n–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ,\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –¥—Ä—É–≥–∏–º –∫–æ–º–∞–Ω–¥–∞–º", reply_markup=generate_clear_chat_button())

@dp.callback_query_handler(lambda c: c.data == 'next_ad', state='*')
async def next_ad(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    ads = data['ads']
    current_ad_index = data['current_ad_index']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if current_ad_index >= len(ads):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
        current_ad_index = 0
        await state.update_data(current_ad_index=current_ad_index)
        await bot.send_message(callback_query.from_user.id, "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–æ–≤–∞.")

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    await send_ads_batch(callback_query.from_user.id, state)

@dp.callback_query_handler(lambda c: c.data == 'oplata', state='*')
async def view_ads(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(
        callback_query.from_user.id,
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 499 —Ä—É–±.\n\n–ü–æ–∫—É–ø–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n- –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è;\n- –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∞–≤—Ç–æ—Ä–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å—Ä–æ–∫–æ–º –Ω–∞ 14 –¥–Ω–µ–π.",
        reply_markup=generate_oplata_button()
    )


@dp.errors_handler(exception=MessageNotModified)
async def message_not_modified_handler(update: types.Update, exception: MessageNotModified):
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    logging.error(f"MessageNotModified: {exception}")

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        if update.callback_query:
            chat_id = update.callback_query.from_user.id
        elif update.message:
            chat_id = update.message.chat.id
        else:
            return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await bot.send_message(chat_id, "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                               reply_markup=generate_main_menu_markup())
    except Exception as e:
        logging.error(f"Error sending 'return to main menu' message: {e}")

    return True
@dp.callback_query_handler(lambda c: c.data == 'clear_chat')
async def clear_chat_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    button_subscribe = InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/SOVMESTNAYA_ARENDA_RU")
    button_continue = InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue')

    keyboard.add(button_subscribe, button_continue)
    user_id = callback_query.from_user.id
    with open('main.jpg', 'rb') as photo:
        await bot.send_photo(user_id, photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=keyboard)
    message_id = callback_query.message.message_id
    start_message_id = message_id
    end_message_id = max(1, start_message_id - 100)  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ 1000 ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç
    deleted_count = 0

    for msg_id in range(start_message_id, end_message_id, -1):
        try:
            await bot.delete_message(user_id, msg_id)
            deleted_count += 1
        except (MessageToDeleteNotFound, MessageCantBeDeleted, BadRequest):
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            continue

@dp.callback_query_handler(lambda c: c.data == 'clear_chat1')
async def clear_chat_callback1(callback_query: types.CallbackQuery):
    await update_last_activity(callback_query.from_user.id)
    keyboard = InlineKeyboardMarkup(row_width=2)
    button_subscribe = InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/SOVMESTNAYA_ARENDA_RU")
    button_continue = InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue')

    keyboard.add(button_subscribe, button_continue)
    user_id = callback_query.from_user.id
    with open('main.jpg', 'rb') as photo:
        await bot.send_photo(user_id, photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=keyboard)
    message_id = callback_query.message.message_id
    start_message_id = message_id
    end_message_id = max(1, start_message_id - 100)  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ 1000 ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç
    deleted_count = 0

    for msg_id in range(start_message_id, end_message_id, -1):
        try:
            await bot.delete_message(user_id, msg_id)
            deleted_count += 1
        except (MessageToDeleteNotFound, MessageCantBeDeleted, BadRequest):
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            continue
async def clear_chat(user_id, start_message_id):
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å start_message_id –∏ –¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–∑–∞–¥
    end_message_id = max(1, start_message_id - 100)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª –≤ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–∑–∞–¥
    deleted_count = 0

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö —É–¥–∞–ª–∏—Ç—å
    for msg_id in range(start_message_id, end_message_id, -1):
        try:
            await bot.delete_message(user_id, msg_id)
            deleted_count += 1
        except (MessageToDeleteNotFound, MessageCantBeDeleted, BadRequest):
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            continue

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏


user_payments = {}

# –î–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
YOUR_TERMINAL_KEY = "1710936568011"
YOUR_PASSWORD = "zhk96rqg1nud84lc"


def generate_token(data):
    sorted_data = dict(sorted(data.items()))
    concatenated_values = ''.join([str(value) for value in sorted_data.values()])
    return hashlib.sha256(concatenated_values.encode()).hexdigest()


async def create_payment(user_id):
    order_id = str(uuid.uuid4())
    amount = 49900  # –ü—Ä–∏–º–µ—Ä —Å—É–º–º—ã –≤ –∫–æ–ø–µ–π–∫–∞—Ö –¥–ª—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–∞ 1000 —Ä—É–±–ª–µ–π
    description = "–ü–æ–¥–ø–∏—Å–∫–∞"

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞, –≤–∫–ª—é—á–∞—è Password
    data_for_token = {
        "Amount": str(amount),
        "OrderId": order_id,
        "Description": description,
        "Password": YOUR_PASSWORD,
        "TerminalKey": YOUR_TERMINAL_KEY
    }
    token = generate_token(data_for_token)

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ
    data = {
        "TerminalKey": YOUR_TERMINAL_KEY,
        "Amount": amount,
        "OrderId": order_id,
        "Description": description,
        "Token": token,
        "DATA": {
            "Phone": "+71234567890",
            "Email": "a@test.com"
        },
        "Payments": {
            "Electronic": 49900,  # –°—É–º–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º –≤ –∫–æ–ø–µ–π–∫–∞—Ö, –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å Amount
            "AdvancePayment": 0,
            "Credit": 0,
            "Provision": 0,
        },

        "Receipt": {
            "Email": "a@test.ru",
            "Phone": "+79031234567",
            "Taxation": "usn_income",
            "Items": [
                {
                    "Name": "–ü–æ–¥–ø–∏—Å–∫–∞",
                    "Price": 49900,
                    "Quantity": 1,
                    "Amount": 49900,
                    "Tax": "none",

                },
                # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            ]

        }

    }



    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    async with ClientSession() as session:
        async with session.post("https://securepay.tinkoff.ru/v2/Init", json=data) as response:
            response_data = await response.json()
            if response_data.get("Success"):
                payment_info = {
                    "payment_id": response_data.get("PaymentId"),
                    "token": token  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
                }
                user_payments[user_id] = payment_info
                return response_data
            else:
                return response_data


async def get_order_status(user_id):
    payment_info = user_payments.get(user_id)
    if not payment_info:
        return {"Error": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω."}

    payment_id = payment_info['payment_id']
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è GetState
    data_for_token = {
        "TerminalKey": YOUR_TERMINAL_KEY,
        "PaymentId": payment_id,
        "Password": YOUR_PASSWORD
    }
    token = generate_token(data_for_token)

    data = {
        "TerminalKey": YOUR_TERMINAL_KEY,
        "PaymentId": payment_id,
        "Token": token,
    }

    url = "https://securepay.tinkoff.ru/v2/GetState"

    async with ClientSession() as session:
        async with session.post(url, json=data) as response:
            response_data = await response.json()
            if response.status == 200:
                print(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {response_data}")
                return response_data
            else:
                print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ö–∞—Å—Å—ã")
                return None




@dp.callback_query_handler(lambda c: c.data == 'buy')
async def process_buy_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    async with aiosqlite.connect('my_database.db') as db:
        async with db.execute("SELECT plus FROM users WHERE id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result and result[0] == 1:
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
                await bot.send_message(user_id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
                return

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏

    payment_response = await create_payment(user_id)
    if isinstance(payment_response, dict) and payment_response.get("Success"):
        payment_url = payment_response.get("PaymentURL")
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url))
        markup.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f"check_payment_{user_id}"))
        await bot.send_message(
            user_id,
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ' –Ω–∏–∂–µ.",
            reply_markup=markup
        )
    else:
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query_handler(lambda c: c.data.startswith('check_payment_'))
async def check_payment_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])
    status_response = await get_order_status(user_id)

    if status_response and status_response.get("Success") and status_response.get("Status") == "CONFIRMED":
        await update_user_subscription(user_id, datetime.now(), 30)  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª–∏—Ç—Å—è 30 –¥–Ω–µ–π
        await bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", reply_markup=generate_clear_chat_button())
    else:
        await bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



@dp.message_handler(commands=['subscription_status'])
async def subscription_status(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect('my_database.db') as db:
        async with db.execute("SELECT subscription_end FROM users WHERE id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()

            if result and result[0]:
                subscription_end = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
                now = datetime.now()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å

                if subscription_end > now:
                    remaining_time = subscription_end - now
                    days, remainder = divmod(remaining_time.total_seconds(), 86400)
                    hours, remainder = divmod(remainder, 3600)
                    minutes, seconds = divmod(remainder, 60)
                    await message.reply(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å {int(days)} –¥–Ω–µ–π, {int(hours)} —á–∞—Å–æ–≤ –∏ {int(minutes)} –º–∏–Ω—É—Ç.")
                else:
                    await message.reply("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë.")
            else:
                await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")


async def reset_user_subscription(user_id: int):
    try:
        async with aiosqlite.connect('my_database.db') as db:
            await db.execute("UPDATE users SET plus = 0 WHERE id = ?", (user_id,))
            await db.commit()
        print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞ –∏ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def update_user_subscription(user_id: int, subscription_start: datetime, subscription_duration: int):
    try:
        subscription_end = subscription_start + timedelta(minutes=subscription_duration)
        async with aiosqlite.connect('my_database.db') as db:
            await db.execute("UPDATE users SET plus = 1, subscription_start = ?, subscription_end = ? WHERE id = ?",
                            (subscription_start.strftime("%Y-%m-%d %H:%M:%S"),
                            subscription_end.strftime("%Y-%m-%d %H:%M:%S"), user_id))
            await db.commit()

        wait_seconds = (subscription_end - datetime.now()).total_seconds()
        if wait_seconds > 0:
            asyncio.create_task(sleep_and_reset(wait_seconds, user_id))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def sleep_and_reset(wait_seconds: int, user_id: int):
    await asyncio.sleep(wait_seconds)
    await reset_user_subscription(user_id)
async def set_all_users_plus_status(status: int):
    try:
        async with aiosqlite.connect('my_database.db') as db:
            await db.execute("UPDATE users SET plus = ?", (status,))
            await db.commit()
        print(f"–°—Ç–∞—Ç—É—Å 'plus' –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ 'plus' –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

@dp.message_handler(commands=['krain8904'])
async def change_plus_status(message: types.Message):
    command_params = message.get_args().split()
    if not command_params or command_params[0] not in ['1', '0']:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: 1 (–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å) –∏–ª–∏ 0 (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å). –ù–∞–ø—Ä–∏–º–µ—Ä: /status 1")
        return

    new_status = int(command_params[0])

    await set_all_users_plus_status(new_status)
    await message.reply(f"–°—Ç–∞—Ç—É—Å 'plus' –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_status}.")

@dp.message_handler(commands=['addadmin'])
async def add_admin(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        user_id_to_add = int(message.get_args())
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id_to_add in ADMIN_IDS:
        await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        ADMIN_IDS.append(user_id_to_add)
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_add} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

user_actions = defaultdict(list)

async def track_user_action(user_id):
    now = datetime.now()
    user_actions[user_id].append(now)
    user_actions[user_id] = [action_time for action_time in user_actions[user_id] if now - action_time < timedelta(minutes=1)]
    if len(user_actions[user_id]) > 4:
        await reset_user_state(user_id)
        user_actions[user_id].clear()
        return True  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–≥–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–∞
    return False  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–≥–æ, —á—Ç–æ –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è


async def reset_user_state(user_id):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await dp.current_state(user=user_id).reset_state()
    await bot.send_message(user_id, "–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",reply_markup=generate_main_menu_markup())
@dp.message_handler()
async def echo(message: Message):
    await update_last_activity(message.from_user.id)
    await message.answer(message.text)


@dp.callback_query_handler()
async def handle_callback_query(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_last_activity(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    await bot.send_message(user_id,
                           "–í—ã –±—ã–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 —á–∞—Å–æ–≤.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏–∂–µ\n—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
                           reply_markup=restart_button())

    # –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–≤–µ–¥–æ–º–∏—Ç—å Telegram, —á—Ç–æ callback –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await bot.answer_callback_query(callback_query.id)
async def on_startup(_):
    asyncio.create_task(check_inactivity())

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
